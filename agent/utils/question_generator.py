"""
Question Generator
Transforms attention point descriptions into natural, oral questions
"""
import re
from typing import List


def generate_natural_question(description: str, index: int = 1, time_period: str = "aujourd'hui") -> str:
    """
    Generate a natural, oral question from an attention point description

    Args:
        description: The attention point description (e.g., "Produits vendus avec quantit√©s")
        index: The question number (for variation)
        time_period: Time period context (e.g., "aujourd'hui", "cette semaine", "ce mois-ci")

    Returns:
        A natural, conversational question suitable for voice interaction
    """

    # Normalize description
    desc_lower = description.lower().strip()

    # Pattern matching for common types of attention points
    patterns = [
        # Sales/Products
        (r'produits?\s+(vendus?|commercialis[√©e]s?)', [f"Qu'est-ce que tu as vendu {time_period} ?", "Tu as vendu quels produits ?", "√áa a donn√© quoi niveau ventes ?"]),
        (r'ventes?|commercialis', ["Tu as fait combien de ventes ?", f"√áa a bien march√© {time_period} ?", "T'as vendu quoi ?"]),
        (r'quantit[√©e]s?', ["Tu as vendu combien d'unit√©s ?", "T'as fait du volume ?"]),

        # Opportunities
        (r'opportunit[√©e]s?', ["Tu as eu des belles opportunit√©s ?", "T'as d√©tect√© des gros coups ?", "Des pistes int√©ressantes ?"]),
        (r'(b2b|b2c|prospects?)', ["T'as rencontr√© des prospects int√©ressants ?", "Des nouvelles pistes √† suivre ?"]),
        (r'(projet|affaire|deal)', ["T'as des projets qui avancent ?", "Des affaires en cours ?"]),

        # Customer feedback
        (r'retours?\s+clients?', ["Les clients ont dit quoi ?", "T'as eu des retours int√©ressants ?", "Qu'est-ce que les clients ont pens√© ?"]),
        (r'(avis|feedback|commentaires?)', ["Ils ont donn√© leur avis sur les produits ?", "Des remarques particuli√®res ?"]),
        (r'satisfaction', ["Les clients √©taient contents ?", "√áa leur a plu ?"]),

        # Competition
        (r'concurren(ce|t)', ["T'as crois√© la concurrence ?", "Des concurrents sur le terrain ?", "Qui est en place chez tes clients ?"]),
        (r'(march[√©e]|positionnement)', ["C'est quoi le mood du march√© en ce moment ?", "Comment tu sens le march√© ?"]),

        # Technical issues
        (r'(probl[√®e]mes?|difficult[√©e]s?|incidents?)', ["Tout s'est bien pass√© ?", "T'as eu des gal√®res ?", "Des probl√®mes √† remonter ?"]),
        (r'techniques?', ["√áa a march√© niveau matos ?", "Pas de souci technique ?"]),

        # Client profile
        (r'profils?\s+(de\s+)?clients?', ["T'as rencontr√© quel type de clients ?", "C'√©tait qui tes rendez-vous ?", f"Quel genre de clients {time_period} ?"]),
        (r'types?\s+(de\s+)?clients?', ["T'as vu quel genre de clients ?", f"C'√©tait quoi le profil {time_period} ?"]),
        (r'(visites?|rendez[- ]vous)', ["Tu as fait combien de rendez-vous ?", f"T'as vu qui {time_period} ?"]),

        # Pricing/Budget
        (r'(prix|tarifs?|budget)', ["On t'a parl√© budget ?", "Des questions sur les prix ?", "Ils ont n√©goci√© ?"]),
        (r'(remises?|n[√©e]gociations?)', ["T'as d√ª n√©gocier ?", "Des demandes de remise ?"]),

        # Events
        (r'[√©e]v[√®e]nements?', ["T'as fait un √©v√©nement ?", "Comment s'est pass√© l'√©v√©nement ?"]),
        (r'animations?', ["T'as anim√© quelque chose ?", "Des animations pr√©vues ?"]),

        # Stock/Logistics
        (r'stocks?', ["T'as besoin de r√©assort ?", "Des produits √† recommander ?"]),
        (r'livraisons?', ["Des livraisons √† pr√©voir ?", "Tout est OK niveau logistique ?"]),

        # Follow-up
        (r'(suivi|relance)', ["Qui faut-il recontacter ?", "Des relances √† faire ?", "T'as des clients √† rappeler ?"]),
        (r'(prochaines?\s+[√©e]tapes?|next)', ["C'est quoi la suite ?", "Les prochaines √©tapes ?"]),
    ]

    # Try to match patterns
    for pattern, questions in patterns:
        if re.search(pattern, desc_lower):
            # Return the first question variant (could be randomized)
            return questions[0] if index == 1 else questions[min(index-1, len(questions)-1)]

    # Fallback: Try to make it more natural
    # Remove parentheses content (often technical details)
    clean_desc = re.sub(r'\([^)]*\)', '', description).strip()

    # Convert to question based on keywords
    if any(word in desc_lower for word in ['d√©tail', 'informations', 'donn√©es']):
        return f"Tu peux me parler de {clean_desc.lower()} ?"
    elif any(word in desc_lower for word in ['nombre', 'combien', 'quantit√©']):
        return f"T'as eu combien de {clean_desc.lower()} ?"
    elif any(word in desc_lower for word in ['qui', 'quel']):
        return f"C'√©tait {clean_desc.lower()} ?"
    else:
        # Generic but more natural than "Parle-moi de..."
        return f"√áa s'est pass√© comment pour {clean_desc.lower()} ?"


def generate_period_intro(frequency: str, report_goal: str = None) -> str:
    """
    Generate a contextual intro based on report frequency and goal

    Args:
        frequency: Report frequency (daily, weekly, biweekly, monthly, per-appointment)
        report_goal: Optional goal/objective of the report

    Returns:
        A natural introduction that sets the context for the report period
    """

    # Vary the intros for natural conversation
    intros = {
        'daily': [
            "c'est parti pour ton point du jour !",
            "pr√™t pour ton rapport quotidien ?",
            "on fait le point sur ta journ√©e ?",
            "faisons le debriefing de ta journ√©e !",
        ],
        'weekly': [
            "c'est parti, faisons un point sur la semaine !",
            "pr√™t pour le bilan de la semaine ?",
            "on fait le point sur cette semaine ?",
            "alors cette semaine, √ßa a donn√© quoi ?",
        ],
        'biweekly': [
            "c'est parti, faisons le bilan des deux derni√®res semaines !",
            "pr√™t pour le point sur ces deux semaines ?",
            "on fait le point sur cette quinzaine ?",
        ],
        'monthly': [
            "c'est parti pour le bilan du mois !",
            "pr√™t pour le point mensuel ?",
            "on fait le bilan de ce mois ?",
        ],
        'per-appointment': [
            "c'est parti pour le debriefing de ta visite !",
            "pr√™t pour ton compte-rendu ?",
            "on fait le point sur ton rendez-vous ?",
        ],
    }

    # Get intro for the frequency (default to first option)
    frequency_intros = intros.get(frequency, intros['daily'])
    intro = frequency_intros[0]  # Could be randomized in the future

    # If we have a specific goal, we could adapt the intro
    # For now, just return the base intro
    return intro


def generate_opening_question(
    user_name: str,
    first_attention_point: dict,
    frequency: str = "daily",
    report_goal: str = None,
    time_period: str = "aujourd'hui"
) -> str:
    """
    Generate an engaging opening question that includes the first attention point

    Args:
        user_name: The user's name
        first_attention_point: The first attention point with description
        frequency: Report frequency (daily, weekly, biweekly, monthly, per-appointment)
        report_goal: Optional goal/objective of the report
        time_period: Time period context (e.g., "aujourd'hui", "cette semaine")

    Returns:
        A warm opening that naturally leads into the first question
    """
    desc = first_attention_point.get("description", "")

    # Check if natural prompts are provided
    natural_prompts = first_attention_point.get("naturalPrompts", [])
    if natural_prompts:
        first_question = natural_prompts[0]
    else:
        # Generate natural question with time period
        first_question = generate_natural_question(desc, index=1, time_period=time_period)

    # Generate contextual intro
    period_intro = generate_period_intro(frequency, report_goal)

    # Combine: greeting + period intro + first question
    return f"Salut {user_name} ! {period_intro} Alors, {first_question}"


# Examples for testing
if __name__ == "__main__":
    test_cases = [
        "Produits vendus avec quantit√©s et prix",
        "Retours clients et satisfaction",
        "Opportunit√©s B2B/B2C (taille du projet, budget, d√©lai de d√©cision)",
        "D√©tail des opportunit√©s B2B/B2C (taille du projet, budget, d√©lai de d√©cision)",
        "Probl√®mes techniques rencontr√©s",
        "Profil des clients rencontr√©s",
        "Concurrence sur le terrain",
        "√âv√©nements ou animations r√©alis√©s",
        "Besoins de r√©assort ou support technique"
    ]

    print("üß™ Test du g√©n√©rateur de questions naturelles\n")
    print("=" * 70)

    for desc in test_cases:
        question = generate_natural_question(desc)
        print(f"\nüìã Point d'attention : \"{desc}\"")
        print(f"‚ùì Question g√©n√©r√©e : \"{question}\"")

    print("\n" + "=" * 70)
    print("\n‚úÖ Tests termin√©s !")
