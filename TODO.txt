Commandes : 
npx expo start --tunnel
npx expo start --web

L'objectif du projet est de permettre de traquer les visites des commerciaux de labo tech au sein des pharmacies de la r√©gion parisienne. Il faut traquer la vente des produits, les commentaires des pharmaciens et essayer de comprendre quels sont les best sellers des concurrents.

  M√©mo - 4 terminaux n√©cessaires
./start-all.sh
  1. Terminal 1 - LiveKit
  npm run livekit:local
  2. Terminal 2 - Proxy
  npm run proxy
  3. Terminal 3 - Agent Python 
  npm run agent
  OR
  ./start-v2.sh
  4. Terminal 4 - Expo
  npx expo start --web -c

  Claude :
  nvm use 22.16.0

  TODO :
  Enlever le mic vert au lancement
  Investiger une DA pepite d'or
  Cr√©√©er l'interface manager
  Pouvoir avoir un "Top question" a mettre

  ‚úÖ FAIT - Corrections agent conversationnel (27 oct 2025) :
  1. Acc√®s aux produits dans les instructions de l'agent
     - L'agent a maintenant acc√®s √† TOUS les champs du catalogue produits (prix, caract√©ristiques, etc.)
     - Peut r√©pondre aux questions sur les prix et calculer des totaux
     - Format: get_products_list_for_prompt() inclus dans les instructions

  2. G√©n√©ration automatique du rapport JSON
     - Patterns de d√©tection √©largis: "pr√©parer ton rapport", "voici le rapport", "je vais g√©n√©rer", etc.
     - Instruction explicite: NE PAS r√©citer le rapport oralement
     - L'agent doit dire "Parfait ! Je vais pr√©parer ton rapport." puis s'arr√™ter

  Fichiers modifi√©s :
  - agent/mainV2.py : Ajout products_info dans build_simple_instructions (ligne 32)
  - agent/mainV2.py : Section catalogue produits dans instructions (lignes 129-141)
  - agent/mainV2.py : Patterns de fin √©largis (lignes 715-723 et 526-534)
  - agent/mainV2.py : Instruction anti-r√©citation orale du rapport (ligne 167)

  ‚úÖ FAIT - Gestion des questions de l'utilisateur (27 oct 2025) :
  - L'agent peut maintenant r√©pondre aux questions de l'utilisateur
  - D√©tection automatique : phrase finissant par "?"
  - Fouille dans le catalogue produits pour r√©pondre
  - Extraction des infos pertinentes m√™me quand l'utilisateur pose une question
  - Les r√©ponses aux questions NE COMPTENT PAS dans le quota
  - Transition naturelle directe vers la question suivante
  - Exemples :
    * User : "J'ai vendu 2 cuiseurs. C'est quoi le prix d√©j√† ?"
    * Agent : "Le cuiseur est √† 299‚Ç¨. D'accord ! Et c'est pour quand la livraison ?"
    * Comptage : Toujours √† la m√™me position (pas +1)

  Fichiers modifi√©s :
  - agent/mainV2.py : Section "GESTION DES QUESTIONS" dans instructions (lignes 175-193)
  - agent/mainV2.py : Comptage intelligent mode voice (lignes 718-735)
  - agent/mainV2.py : Comptage intelligent mode texte (lignes 530-545)

  ‚úÖ FAIT - Flow de fin en 3 √©tapes (27 oct 2025) :
  Le processus de fin est maintenant structur√© en 3 √©tapes obligatoires :

  1. R√âCAPITULATIF (questions_asked >= max_questions)
     - L'agent fait un r√©sum√© naturel et chaleureux
     - Exemple : "Merci Boris ! Pour r√©sumer, tu as vendu [produits], tu as eu des difficult√©s sur [points]"
     - L'agent demande : "As-tu une derni√®re information √† me partager ?"
     - √âtat interne : recap_done = True

  2. DERNI√àRE PAROLE UTILISATEUR
     - L'utilisateur peut faire un ajout, une modification, ou dire "non c'est bon"
     - Cette r√©ponse est captur√©e pour le rapport

  3. CONCLUSION ET G√âN√âRATION
     - L'agent dit : "Parfait, merci ! Je vais pr√©parer ton rapport."
     - D√©tection de fin se d√©clenche (recap_done=True + pattern de fin)
     - Le rapport JSON est g√©n√©r√© automatiquement
     - Micro coup√©, barre de son dispara√Æt, rapport affich√©

  Patterns de d√©tection :
  - R√©capitulatif : "derni√®re information", "derni√®re chose", "as-tu autre chose"
  - Conclusion : "pr√©parer ton rapport", "r√©diger ton rapport", "je vais g√©n√©rer"

  Fichiers modifi√©s :
  - agent/mainV2.py : √âtat recap_done ajout√© (ligne 278-280)
  - agent/mainV2.py : Instructions PROCESSUS DE FIN EN 3 √âTAPES (lignes 166-178)
  - agent/mainV2.py : D√©tection HYBRIDE mode voice (lignes 799-855)
  - agent/mainV2.py : D√©tection HYBRIDE mode texte (lignes 563-615)

  ‚úÖ FAIT - Syst√®me hybride robuste (27 oct 2025) :
  Le d√©clenchement de fin utilise maintenant un syst√®me hybride √† 4 chemins :

  **TRIGGER PRINCIPAL** : questions_asked >= max_questions (robuste, bas√© sur compteur)

  **4 CHEMINS DE D√âTECTION** :

  1. CHEMIN ID√âAL (Patterns stricts)
     - D√©tection "derni√®re information/chose/autre chose" ‚Üí recap_done = True
     - User r√©pond ‚Üí user_responded_after_recap = True
     - Agent dit "pr√©parer ton rapport" ‚Üí END ‚úÖ

  2. CHEMIN SOUPLE (Patterns + Safety)
     - D√©tection recap (patterns √©largis incluant "autre chose")
     - User r√©pond apr√®s recap
     - Agent r√©pond avec pattern de conclusion ‚Üí END ‚úÖ

  3. CHEMIN SAFETY NET (Compteur intelligent)
     - User a r√©pondu apr√®s le recap
     - Agent r√©pond √† nouveau (peu importe le texte)
     - ‚Üí END ‚úÖ (ne reste pas bloqu√© si patterns ne matchent pas)

  4. CHEMIN ULTIME (Filet de s√©curit√©)
     - exchanges_after_max >= 6 (3 √©changes complets)
     - ‚Üí END ‚úÖ (protection contre boucle infinie)

  **Sc√©narios couverts** :
  - ‚úÖ Agent suit les instructions (chemin 1)
  - ‚úÖ Agent dit "autre chose" au lieu de "derni√®re information" (chemin 2)
  - ‚úÖ User pose une question apr√®s le recap (continue normalement, puis chemin 3)
  - ‚úÖ Patterns ne matchent pas du tout (chemin 3)
  - ‚úÖ Boucle bizarre (chemin 4)

  Fichiers modifi√©s :
  - agent/mainV2.py : 3 √©tats de tracking (lignes 278-280)
  - agent/mainV2.py : Patterns √©largis pour recap (8 variantes)
  - agent/mainV2.py : Logique hybride 4 chemins voice (lignes 799-855)
  - agent/mainV2.py : Logique hybride 4 chemins texte (lignes 563-615)

  ‚úÖ FAIT - Coupure micro imm√©diate (27 oct 2025) :
  Correction critique du timing de fin de conversation :

  **PROBL√àME** : L'utilisateur pouvait continuer √† parler APR√àS que l'agent dise "Je vais pr√©parer ton rapport",
  cr√©ant des messages suppl√©mentaires qui emp√™chaient la g√©n√©ration du rapport.

  **SOLUTION** : Envoi imm√©diat du signal `conversation_ending` d√®s que l'agent prononce la phrase finale,
  AVANT que l'utilisateur puisse intervenir.

  **FLOW CORRIG√â** :
  1. Agent dit : "Parfait ! Je vais pr√©parer ton rapport."
  2. Signal `conversation_ending` envoy√© IMM√âDIATEMENT (ligne 854-862 voice, 586-594 texte)
  3. Client re√ßoit signal ‚Üí Coupe micro INSTANTAN√âMENT
  4. G√©n√©ration du rapport commence (plus de messages utilisateur possibles)

  **CHEMIN 0** ajout√© : D√©tection imm√©diate des patterns finaux
  - "je vais pr√©parer ton rapport"
  - "je vais pr√©parer le rapport"
  - "je vais r√©diger ton rapport"
  - "je vais r√©diger le rapport"
  ‚Üí Envoi asyncio.create_task(send_ending_signal()) imm√©diat

  Fichiers modifi√©s :
  - agent/mainV2.py : CHEMIN 0 d√©tection imm√©diate (lignes 841-863 voice, 574-594 texte)
  - agent/mainV2.py : Suppression signal dupliqu√© dans finalize() (ligne 925-928)

  ‚úÖ FAIT - Syst√®me de m√©tadonn√©es produits enrichies :
  - Toutes les colonnes Excel sont maintenant captur√©es et stock√©es
  - Distinction entre colonnes affich√©es (max 5) et champs disponibles (tous)
  - L'IA peut utiliser toutes les infos produits dans les conversations
  - Enrichissement automatique des m√©tadonn√©es par IA
  - Documentation compl√®te : voir PRODUCT_METADATA_SYSTEM.md

  Fichiers modifi√©s :
  - types/project.ts : Ajout ProductFieldMetadata, TableStructure enrichi
  - services/productFieldAnalyzer.ts : Nouveau service d'analyse
  - services/tableStructureGenerator.ts : Utilisation des m√©tadonn√©es
  - server.js : Endpoints /analyze-product-fields + mise √† jour /generate-table-structure
  - agent/utils/config_loader.py : Affichage de tous les champs produits

  ‚úÖ FAIT - Syst√®me de limitation intelligente des questions :
  - Formule flexible : base + 50% buffer (ex: 3 points ‚Üí 5 questions max)
  - üéØ PRIORIT√â ABSOLUE : Questions obligatoires (base) AVANT questions bonus
  - Suivi en temps r√©el : "Questions obligatoires couvertes : 2/3"
  - Permet des questions de suivi pour clarifier les r√©ponses
  - Garde-fous automatiques pour √©viter conversations trop longues
  - Instructions adaptatives selon progression (alertes √† -1 et 0 questions)
  - Mise √† jour dynamique des instructions en temps r√©el
  - Documentation compl√®te : voir agent/QUESTION_LIMIT_SYSTEM.md + PRIORITY_SYSTEM.md

  Fichiers modifi√©s :
  - agent/mainV2.py : Nouvelle formule de calcul + garde-fous + instructions adaptatives

  ‚úÖ FAIT - Syst√®me de g√©n√©ration de questions naturelles :
  - Transformation intelligente des points d'attention en questions orales
  - Deux niveaux : Claude (cr√©ation projet) + Fallback Python (runtime)
  - 10+ patterns pour questions naturelles (ventes, opportunit√©s, retours, etc.)
  - Fini les "Parle-moi de..." ‚Üí Questions courtes et personnelles
  - Exemples : "Tu as eu des belles opportunit√©s ?" au lieu de "Parle-moi de d√©tail des opportunit√©s B2B/B2C"
  - Documentation compl√®te : voir agent/NATURAL_QUESTIONS_SYSTEM.md

  Fichiers cr√©√©s :
  - agent/utils/question_generator.py : G√©n√©rateur intelligent de questions

  Fichiers modifi√©s :
  - services/claudeProjectAnalyzer.ts : Prompt enrichi pour g√©n√©rer naturalPrompts
  - agent/mainV2.py : Int√©gration du g√©n√©rateur en fallback

  ‚úÖ FAIT - Description utilisateur conviviale :
  - Ajout d'un champ 'userFacingDescription' g√©n√©r√© par Claude (max 2 phrases)
  - Description courte et engageante pour l'utilisateur final
  - Diff√©rente de la description technique du manager
  - Affich√©e dans la page principale √† la place de la description projet
  - Exemple : "Je t'aide √† cr√©er ton rapport de journ√©e en quelques minutes. Raconte-moi simplement ta journ√©e, je m'occupe du reste !"

  Fichiers modifi√©s :
  - types/project.ts : Ajout du champ userFacingDescription
  - services/claudeProjectAnalyzer.ts : G√©n√©ration de la description par Claude + normalisation reportTemplate
  - components/ProjectCreator.tsx : Sauvegarde + affichage dans le r√©capitulatif
  - app/project.tsx : Affichage dans la banni√®re principale

  Note : Normalisation reportTemplate pour g√©rer les deux formats (array vs object)
  - Format array ["section1"] ‚Üí Converti en {sections: ["section1"]}
  - Garantit la compatibilit√© avec les r√©ponses Claude
